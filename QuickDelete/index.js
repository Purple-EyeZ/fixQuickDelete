(function(u,y,n){"use strict";const{intl:a,t:l}=y.findByProps("intl")??{},{runtimeHashMessageKey:c}=y.findByProps("runtimeHashMessageKey")??{},d=!!n.i18n.Messages.DISCORD||!a||!l||!c,r={},P=Object.freeze(new Proxy(r,{get(t,f,g){const e=f.toString();if(e in r)return Reflect.get(t,e,g);if(d)return r[e]=n.i18n.Messages[e];const s=c(e);try{return r[e]=a.string(l[s])}catch(i){return console.warn(`intlProxy: Failed to get intl message for key: ${e} (${s})`,i),r[e]=""}}})),o={};Object.freeze(new Proxy(o,{get(t,f,g){const e=f.toString();if(e in o)return Reflect.get(t,e,g);if(d)return o[e]=typeof n.i18n.Messages[e]=="string"?function(){return n.i18n.Messages[e]}:n.i18n.Messages[e].format;const s=c(e);try{return o[e]=function(i){return a.format(l[s],i)}}catch(i){return console.warn(`intlFormat: Failed to get intl format message for key: ${e} (${s})`,i),o[e]=function(){return""}}}}));var M={onLoad:function(){try{console.log("[Plugin] Test dynamique sur intlProxy...");for(const t in P)console.log(`[Plugin] Cl\xE9 trouv\xE9e : ${t}, Valeur :`,P[t])}catch(t){console.error("[Plugin] Erreur lors du test sur intlProxy :",t)}},onUnload:function(){}};return u.default=M,Object.defineProperty(u,"__esModule",{value:!0}),u})({},vendetta.metro,vendetta.metro.common);
